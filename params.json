{"name":"Dashing-jenkins job","tagline":"Jenkins widget for Dashing-JS","body":"# Jenkins Job Dashing widget.\r\n\r\n[Jenkins](https://jenkins-ci.org/) widget for [Dashing-JS](http://fabiocaseri.github.io/dashing-js).\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/kj187/dashing-jenkins_job/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\nThe Jenkins Job widget is a generic widget for Jenkins Jobs which provides a highly visible view of the build status and build progress of selected Jenkins jobs. Via configuration it is possible to add multiple widgets for different Jenkins jobs.\r\n\r\n## Preview\r\n![example 1](http://res.cloudinary.com/kj187/image/upload/v1450096022/example_01_wq47h5.png)\r\n![example 2](http://res.cloudinary.com/kj187/image/upload/v1450095915/example_02_gudarm.png) \r\n## Installation\r\n\r\n```shell\r\n$ dashing-js install https://github.com/kj187/dashing-jenkins_job/archive/master.zip\r\n```\r\nMove the `widgets/jenkins_job/jenkins.config.sample.js` file to the dashboard root directory and rename it to `jenkins.config.js`. \r\n\r\nThe progressbar requires the jQueryUI styles and javascript lib. Add the following lines to your `dashboards/layout.ejs`\r\n\r\n```html\r\n  <script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js\"></script>\r\n  <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.css\">\r\n```\r\n\r\nOr if you use Jade as your favorite template engine\r\n```jade\r\nscript(src='//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js')\r\nlink(rel='stylesheet', href='//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.css')\r\n```\r\n\r\n## Requirements\r\nThe following NPM packages are required\r\n```shell\r\n$ npm install jenkins-api\r\n$ npm install cron\r\n$ npm install moment\r\n```\r\n\r\n## Usage\r\nTo include the widget on your dashboard, add the following snippet to the dashboard layout file:\r\n\r\n```html\r\n    <li data-row=\"1\" data-col=\"1\" data-sizex=\"1\" data-sizey=\"1\" class=\"widget-jenkins_job\">\r\n      <div data-id=\"build\" data-view=\"JenkinsJob\" data-bind-class=\"result | append additionalclass\" data-additionalclass=\" widget\"></div>\r\n      <i class=\"fa fa-archive icon-background\"></i>\r\n    </li>\r\n```\r\nOr again, if you use Jade as your favorite template engine \r\n```jade\r\n      li(data-row='1', data-col='1', data-sizex='1', data-sizey='1', class='widget-jenkins_job')\r\n        div(data-id='build', data-view='JenkinsJob', data-bind-class='result | append additionalclass', data-additionalclass=' widget')\r\n        i(class='fa fa-archive icon-background')\r\n```\r\n\r\nYou can add multiple widgets for different Jenkins jobs. Each widget must have his own unqiue `data-id`. My suggestion is to get the jenkins job name for `data-id`. \r\n\r\n## Settings\r\n\r\nTo actually use the widget on your own Dashboard, you'll have to have an access token from your Jenkins server. If you don`t have an access token you can also use your username and password. \r\n\r\n```javascript\r\nmodule.exports = {\r\n    protocol: 'https',\r\n    username: 'YOUR_JENKINS_USERNAME',\r\n    token: 'YOUR_JENKINS_ACCESS_TOKEN',\r\n    host: 'YOUR_JENKINS_HOST',\r\n\r\n    jobs: [\r\n        {\r\n            id: 'build',\r\n            displayName: 'Build',\r\n            eventName: 'build',\r\n            cronInterval: '*/1 * * * * *',\r\n            apiMethod: 'last_build_info',\r\n\r\n            displayArguments: {\r\n                title_isEnabled: true,\r\n                buildNumber_isEnabled: true,\r\n                timeAgo_isEnabled: true,\r\n                branch_isEnabled: true,\r\n                displayDuration_isEnabled: true\r\n            },\r\n\r\n            //parameterizedAttributes: [\r\n            //    {\r\n            //        attributeName: 'branch',\r\n            //        jenkinsParameterName: 'BRANCH_TO_BUILD'\r\n            //    }\r\n            //]\r\n        },\r\n        \r\n        // Multiple jenkins jobs\r\n        //{\r\n        //    id: 'static_code_analysis',\r\n        //    displayName: 'Static Code Analysis',\r\n        //    eventName: 'static_code_analysis',\r\n        //    cronInterval: '*/1 * * * * *',\r\n        //    apiMethod: 'last_build_info',\r\n        //\r\n        //    displayArguments: {\r\n        //        title_isEnabled: true,\r\n        //        buildNumber_isEnabled: false,\r\n        //        timeAgo_isEnabled: true,\r\n        //        branch_isEnabled: false,\r\n        //        displayDuration_isEnabled: true\r\n        //    }\r\n        //}\r\n    ]\r\n}\r\n```\r\n### Jenkins settings\r\n| Setting       | Example           | Description |\r\n| ------------- |-------------| -----|\r\n| protocol      | https   | Protocol of your jenkins server |\r\n| username      | julian.kleinhans   | Username for authentication |\r\n| token         | ABCDEFG12345JHKLLAIJJ   | Access token or plaintext password for authentication |\r\n| host      | jenkins-ci.kj187.de   | Host of your jenkins server |\r\n\r\n##### jobs\r\nJobs is an array and can have multiple jobs\r\n\r\n| Setting       | Example           | Description |\r\n| ------------- |-------------| -----|\r\n| id      | build   | The jenkins job name |\r\n| displayName      | Build    | The widget title  |\r\n| eventName      | build   | Event name, must be the same as the data-id attribute |\r\n| cronInterval      | */1 * * * * *   |  |\r\n| apiMethod      | last_build_info   | Jenkins API method. Don`t change this value! |\r\n\r\n###### displayArguments\r\ndisplayArguments gives you the possibility to show or hide some parts in your widget\r\n\r\n| Setting       | Example           | Description |\r\n| ------------- |-------------| -----|\r\n| title_isEnabled      | true   | Show title |\r\n| buildNumber_isEnabled      | true   | Show buildnumber |\r\n| timeAgo_isEnabled      | true   | Show time of last execution  |\r\n| branch_isEnabled      | false   | Don`t show the branch name  |\r\n| displayDuration_isEnabled      | true   | Show the duration time  |\r\n\r\n###### parameterizedAttributes\r\nIn Jenkins it is possible to create your own attributes (parameterized attributes). With this array it is possible to read this dynamical attributes and bind them onto an variable. \r\n\r\n| Setting       | Example           | Description |\r\n| ------------- |-------------| -----|\r\n| attributeName      | branch   | Attribute name which is available for data-bind |\r\n| jenkinsParameterName      | BRANCH_TO_BUILD   | The name of your own jenkins parameter |\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}